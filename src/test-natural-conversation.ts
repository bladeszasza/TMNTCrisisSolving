#!/usr/bin/env npx ts-node

/**
 * Natural Conversation Test Suite
 * 
 * Comprehensive test of the Open Floor Protocol's natural conversation capabilities.
 * This test demonstrates the core benefits of OFP in multi-agent interactions:
 * 
 * ## Open Floor Protocol Benefits Demonstrated:
 * 
 * ### 1. Conversational Continuity
 * - **Seamless Turn Management**: Agents naturally request, receive, and yield floor control
 * - **Context Preservation**: Conversation state maintained across agent transitions
 * - **Natural Flow**: Human-like conversation patterns without awkward interruptions
 * 
 * ### 2. Technical Benefits
 * - **Reduced Latency**: Optimized response generation through AI integration
 * - **Better User Experience**: More intuitive and engaging multi-agent interactions
 * - **Scalability**: Efficient handling of concurrent agent participation
 * 
 * ### 3. Business Value
 * - **Higher Engagement**: Users experience more natural interactions
 * - **Improved Satisfaction**: Organic conversation flow feels more authentic
 * - **Reduced Complexity**: Protocol handles coordination automatically
 * 
 * ### 4. Implementation Advantages
 * - **Event-Driven Architecture**: Asynchronous message passing via conversation envelopes
 * - **Priority-Based Queuing**: Intelligent floor management with agent priorities
 * - **AI-Powered Decision Making**: Agents decide participation based on context relevance
 * - **Graceful Degradation**: Fallback modes when AI services are unavailable
 * 
 * ## Test Scenario: "Operation Retro Doom"
 * Complex multi-threat scenario requiring coordinated response from all four TMNT agents,
 * showcasing OFP's ability to handle sophisticated multi-agent problem-solving.
 * 
 * @see ../docs/open-floor-protocol.md for detailed protocol specification
 * @author Generated by Professional Codebase Analysis Project
 * @since 1.0.0
 */

import { DemoSquadManager } from './demo/DemoSquadManager';
import path from 'path';
import { exec } from 'child_process';
import fs from 'fs';

/**
 * Execute Natural Conversation Test
 * 
 * This function demonstrates the complete Open Floor Protocol workflow:
 * 
 * **Protocol Flow:**
 * 1. **Initialization**: Squad agents register with FloorManager and discovery service
 * 2. **User Input Processing**: Crisis scenario triggers natural conversation mode  
 * 3. **Organic Agent Participation**: Agents use AI to determine relevance and interest
 * 4. **Floor Management**: Priority-based turn-taking with automatic yielding
 * 5. **Context Preservation**: Conversation state maintained throughout interaction
 * 6. **HTML Generation**: Automatic showcase generation for conversation visualization
 * 
 * **Open Floor Protocol Benefits Showcased:**
 * - **Conversational Continuity**: No interruptions or awkward pauses
 * - **Context Awareness**: Each agent builds on previous contributions
 * - **Natural Participation**: AI-driven decision making for agent engagement
 * - **Graceful Error Handling**: Timeout protection with fallback HTML generation
 * 
 * @returns Promise<void> - Completes when conversation finishes or times out
 * @throws Error - If squad initialization fails or critical errors occur
 */
async function testNaturalConversation(): Promise<void> {
  console.log('üê¢ Testing Natural Multi-Agent Conversation System');
  console.log('================================================\n');

  try {
    // Open Floor Protocol Step 1: Squad Initialization
    // - Agents register with FloorManager for turn-taking coordination
    // - Discovery service catalogs agent capabilities and manifests
    // - AI services initialize for intelligent response generation
    const squadManager = new DemoSquadManager();
    await squadManager.initialize();

    console.log('‚úÖ Squad initialized successfully!\n');

    // Open Floor Protocol Step 2: Complex Multi-Agent Scenario
    // This scenario tests OFP's ability to handle:
    // - Multiple simultaneous threats requiring different expertise areas
    // - Context-rich information that agents must process and prioritize
    // - Coordination between agents with different personalities and skills
    const userMessage = "Totally bogus news, dudes! April O'Neil just intercepted a radical transmission on her turtle-com! Shredder's launched 'Operation Retro Doom' across multiple time zones! He's sent Krang through a dimensional portal to steal all the Ecto-Cooler from the 90s, Bebop and Rocksteady are hijacking the last Blockbuster Video to broadcast mind-control static through VHS tapes, and the Foot Clan ninjas are replacing all Pizza Hut stuffed crust with anchovies! But that's not even the worst part - Baxter Stockman's mutant mousers are eating through the cables at the arcade, threatening to crash the high scores on TMNT: Turtles in Time! Meanwhile, Leatherhead's in the sewers trying to flood the city's last remaining RadioShack! Master Splinter's meditation crystals are going haywire, and Casey Jones is stuck in traffic because someone stole all the tokens from the toll booths! We need maximum turtle power to stop this radical catastrophe before Saturday morning cartoons are canceled forever! Time to break out the Party Wagon, crank up some Vanilla Ice, and show these shell-shocked villains why heroes in a half-shell always save the day! We need to figure out with how much force we attack, we should have a strategy, we should attack both phisically with tech and Mickey I am looking at you mentally do not show them that they are strong, turtle power! COWABUNGA!";
    // const userMessageHUN = "Hihetetlen h√≠rek, cs√°v√≥k! Bobo kapit√°ny most kapta el a galaktikus v√©szjelz√©st a ≈±r-walkie-talkie-n! Dr. Gonosz elind√≠totta a 'Neon K√°osz Tervet' az eg√©sz naperendszerben! Robotzseni√°lisa, X-7-es √°trep√ºlt a Hold t√∫loldal√°ra, hogy ellopja az √∂sszes csillagport a 80-as √©vekb≈ël, Ac√©lheart √©s L√©zermaci √°tvette az ir√°ny√≠t√°st az utols√≥ videoj√°t√©k-boltban, hogy hipnotikus zen√©t j√°tsszanak a Pac-Man g√©peken kereszt√ºl, a Hologram Kommand√≥sok pedig minden McDonald's-ban a Happy Meal j√°t√©kokat cser√©lgetik agymos√≥ k√ºty√ºkre! De ez m√©g semmi - Professor K√©mcs≈ë mut√°ns robotjai √°tf√∫rj√°k a bowlingp√°lya vezet√©keit, vesz√©lyeztetve a nagy bajnoks√°g eredm√©ny√©t! Id≈ëk√∂zben Mega-Polip a tengerfen√©ken pr√≥b√°lja els√ºllyeszteni az utols√≥ haj√≥s √©ttermet! Zen mester lebeg≈ë g√∂mbjei felrobbanni k√©sz√ºlnek, Rex sof≈ër pedig egy ≈±rlift-dug√≥ban ragadt, mert valaki ellopta az √∂sszes ≈±rbenzint! Szuper sz√≠nes er≈ëre van sz√ºks√©g, hogy meg√°ll√≠tsuk ezt a neon ≈ër√ºletet, miel≈ëtt a vas√°rnapi sci-fi filmeket √∂r√∂kre betiltj√°k! Ideje beind√≠tani a Rad√≠r Rak√©t√°t, feltekerni egy kis szintetiz√°tor zen√©t, √©s megmutatni ezeknek a hologram-hab√≥kos rosszfik√°knak, hogy a neon h≈ës√∂k sosem adj√°k fel! SZUPER-FANTASZTIKUS-MEGA-GY≈êZELEM!"
    console.log('üö® CRISIS ALERT üö®');
    console.log(`User: ${userMessage}\n`);

    // Open Floor Protocol Step 3: Natural Conversation Initiation
    // - Agents analyze input using AI to determine relevance and interest
    // - Floor management handles organic participation without scripted turns
    // - Context preservation ensures coherent multi-agent responses
    console.log('üåü Initiating natural agent conversation...\n');
    const startTime = Date.now();
    
    // Open Floor Protocol Step 4: Conversation Processing & HTML Generation
    // - Natural conversation with automatic transcript generation
    // - Comic-book style HTML showcase for demonstration purposes
    const title = 'TEENAGE MUTANT NINJA TURTLES: CRISIS SOLVING';
    const outputDir = './output';
    
    // Open Floor Protocol Safety Feature: Timeout Protection
    // Prevents infinite conversation loops while allowing organic interaction
    // This demonstrates OFP's graceful handling of edge cases
    const conversationTimeout = new Promise((_, reject) => 
      setTimeout(() => reject(new Error('Conversation timeout')), 60000) // 1-minute timeout for quick CI-friendly run
    );
    
    let result: { messages: any[]; htmlPath: string } | undefined;
    try {
      result = await Promise.race([
        squadManager.processNaturalConversationWithHTML(userMessage, title, outputDir),
        conversationTimeout
      ]) as { messages: any[]; htmlPath: string };
    } catch (error) {
      console.log('‚ö†Ô∏è  Conversation timed out, but HTML may have been generated...');
      console.log('üìù Checking for generated HTML files...\n');
      
      // Try to find any generated HTML files
      const outputFiles = fs.readdirSync(outputDir).filter((f: string) => f.endsWith('.html'));
      
      if (outputFiles.length > 0) {
        const htmlPath = `${outputDir}/${outputFiles[0]}`;
        console.log(`‚úÖ Found HTML file: ${htmlPath}`);
        
        // Auto-open the file
        const absolutePath = path.resolve(htmlPath);
        const command = process.platform === 'darwin' ? 'open' : 
                       process.platform === 'win32' ? 'start' : 'xdg-open';
        
        exec(`${command} "${absolutePath}"`, (error) => {
          if (error) {
            console.log('‚ö†Ô∏è  Could not auto-open browser. Please open the file manually:');
            console.log(`   file://${absolutePath}`);
          } else {
            console.log('‚úÖ Opened HTML showcase in browser!');
          }
        });
        
        console.log('\n‚úÖ Test completed with timeout but HTML generated!');
        return;
      } else {
        console.log('‚ùå No HTML files found in output directory');
        throw error;
      }
    }
    
    const endTime = Date.now();
    const duration = endTime - startTime;

    // Display results
    if (result) {
      console.log('\nüìä CONVERSATION RESULTS:');
      console.log('========================');
      console.log(`Duration: ${duration}ms`);
      console.log(`Agent contributions: ${result.messages.length}`);
      console.log(`Average response time per agent: ${Math.round(duration / Math.max(result.messages.length, 1))}ms\n`);

      // Show agent participation
      const agentStats = result.messages.reduce((stats: Record<string, number>, msg: any) => {
        stats[msg.agentName] = (stats[msg.agentName] || 0) + 1;
        return stats;
      }, {} as Record<string, number>);

      console.log('üé≠ Agent Participation:');
      Object.entries(agentStats).forEach(([agent, count]) => {
        console.log(`  ${agent}: ${count} contribution${count !== 1 ? 's' : ''}`);
      });

      console.log('\nüí¨ Full Conversation Flow:');
      console.log('==========================');
      result.messages.forEach((msg: any, index: number) => {
        console.log(`${index + 1}. ${msg.agentName}: ${msg.content}`);
      });

      // Display HTML showcase info
      console.log('\nüé® HTML SHOWCASE GENERATED:');
      console.log('===========================');
      console.log(`üìÑ HTML file: ${result.htmlPath}`);
      console.log(`üé≠ Template: Comic book style with TMNT theme`);
      
      // Automatically open in browser
      console.log('\nüåê Opening HTML showcase in browser...');
      const absolutePath = path.resolve(result.htmlPath);
      const command = process.platform === 'darwin' ? 'open' : 
                     process.platform === 'win32' ? 'start' : 'xdg-open';
      
      exec(`${command} "${absolutePath}"`, (error) => {
        if (error) {
          console.log('‚ö†Ô∏è  Could not auto-open browser. Please open the file manually:');
          console.log(`   file://${absolutePath}`);
        } else {
          console.log('‚úÖ Opened HTML showcase in browser!');
        }
      });
    }

    console.log('\n‚úÖ Natural conversation test completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
    process.exit(1);
  }
}

// Run the test if this file is executed directly
if (require.main === module) {
  testNaturalConversation().catch(console.error);
}

export { testNaturalConversation };